{"version":3,"file":"react-query.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/notifyManager.ts","../src/core/queryObserver.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/core/setOnlineHandler.ts","../src/react/reactBatchedUpdates.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/ReactQueryErrorResetBoundary.tsx","../src/react/utils.ts","../src/react/useIsFetching.ts","../src/react/useMutation.ts","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/usePaginatedQuery.ts","../src/react/useInfiniteQuery.ts","../src/index.ts"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { FetchMoreOptions, RefetchOptions } from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type QueryKey =\n  | boolean\n  | null\n  | number\n  | object\n  | string\n  | undefined\n  | { [key: number]: QueryKey }\n  | { [key: string]: QueryKey }\n  | readonly QueryKey[]\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\nexport type TypedQueryFunction<\n  TResult,\n  TArgs extends TypedQueryFunctionArgs = TypedQueryFunctionArgs\n> = (...args: TArgs) => TResult | Promise<TResult>\n\nexport type TypedQueryFunctionArgs = readonly [unknown, ...unknown[]]\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown, TData = TResult> {\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  cacheTime?: number\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  queryFn?: QueryFunction<TData>\n  queryKey?: QueryKey\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  initialData?: TResult | InitialDataFunction<TResult>\n  infinite?: true\n  /**\n   * Set this to `false` to disable structural sharing between query results.\n   * Defaults to `true`.\n   */\n  structuralSharing?: boolean\n  /**\n   * This function can be set to automatically get the next cursor for infinite queries.\n   * The result will also be used to determine the value of `canFetchMore`.\n   */\n  getFetchMore?: (lastPage: TData, allPages: TData[]) => unknown\n}\n\nexport interface QueryObserverConfig<\n  TResult,\n  TError = unknown,\n  TData = TResult\n> extends BaseQueryConfig<TResult, TError, TData> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Defaults to `true`.\n   */\n  enabled?: boolean | unknown\n  /**\n   * The time in milliseconds after data is considered stale.\n   * If set to `Infinity`, the data will never be stale.\n   */\n  staleTime?: number\n  /**\n   * If set, this will mark any `initialData` provided as stale and will likely cause it to be refetched on mount.\n   * If a function is passed, it will be called only when appropriate to resolve the `initialStale` value.\n   * This can be useful if your `initialStale` value is costly to calculate.\n   */\n  initialStale?: boolean | InitialStaleFunction\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * Defaults to `false`.\n   */\n  refetchInterval?: number | false\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * If set to `true`, the query will refetch on window focus if the data is stale.\n   * If set to `false`, the query will not refetch on window focus.\n   * If set to `'always'`, the query will always refetch on window focus.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?: boolean | 'always'\n  /**\n   * If set to `true`, the query will refetch on reconnect if the data is stale.\n   * If set to `false`, the query will not refetch on reconnect.\n   * If set to `'always'`, the query will always refetch on reconnect.\n   * Defaults to `true`.\n   */\n  refetchOnReconnect?: boolean | 'always'\n  /**\n   * If set to `true`, the query will refetch on mount if the data is stale.\n   * If set to `false`, will disable additional instances of a query to trigger background refetches.\n   * If set to `'always'`, the query will always refetch on mount.\n   * Defaults to `true`.\n   */\n  refetchOnMount?: boolean | 'always'\n  /**\n   * Set this to `true` to always fetch when the component mounts (regardless of staleness).\n   * Defaults to `false`.\n   */\n  forceFetchOnMount?: boolean\n  /**\n   * Whether a change to the query status should re-render a component.\n   * If set to `false`, the component will only re-render when the actual `data` or `error` changes.\n   * Defaults to `true`.\n   */\n  notifyOnStatusChange?: boolean\n  /**\n   * This callback will fire any time the query successfully fetches new data.\n   */\n  onSuccess?: (data: TResult) => void\n  /**\n   * This callback will fire if the query encounters an error and will be passed the error.\n   */\n  onError?: (err: TError) => void\n  /**\n   * This callback will fire any time the query is either successfully fetched or errors and be passed either the data or error.\n   */\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * Defaults to `false`.\n   */\n  useErrorBoundary?: boolean\n  /**\n   * If set to `true`, the query will suspend when `status === 'loading'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * Set this to `true` to keep the previous `data` when fetching based on a new query key.\n   * Defaults to `false`.\n   */\n  keepPreviousData?: boolean\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult[], TError, TResult> {}\n\nexport interface ResolvedQueryConfig<TResult, TError = unknown>\n  extends QueryConfig<TResult, TError> {\n  cacheTime: number\n  queryCache: QueryCache\n  queryFn: QueryFunction<TResult>\n  queryHash: string\n  queryKey: ArrayQueryKey\n  queryKeySerializerFn: QueryKeySerializerFunction\n  staleTime: number\n}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  canFetchMore: boolean | undefined\n  clear: () => void\n  data: TResult | undefined\n  error: TError | null\n  failureCount: number\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult | undefined>\n  isError: boolean\n  isFetched: boolean\n  isFetchedAfterMount: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isInitialData: boolean\n  isLoading: boolean\n  isPreviousData: boolean\n  isStale: boolean\n  isSuccess: boolean\n  refetch: (options?: RefetchOptions) => Promise<TResult | undefined>\n  remove: () => void\n  status: QueryStatus\n  updatedAt: number\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<unknown> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<unknown> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<unknown> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport class CancelledError {\n  silent?: boolean\n  constructor(silent?: boolean) {\n    this.silent = silent\n  }\n}\n\n// UTILS\n\nlet _uid = 0\nexport function uid(): number {\n  return _uid++\n}\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error()\n  }\n\n  if (isPlainObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  arg1: any,\n  arg2?: any,\n  arg3?: any,\n  arg4?: any\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isPlainObject(arg1)) {\n    queryKey = arg1.queryKey\n    queryFn = arg1.queryFn\n    config = arg1.config\n    options = arg2\n  } else if (isPlainObject(arg2)) {\n    queryKey = arg1\n    config = arg2\n    options = arg3\n  } else {\n    queryKey = arg1\n    queryFn = arg2\n    config = arg3\n    options = arg4\n  }\n\n  config = config || {}\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n\nexport function createSetHandler(fn: () => void) {\n  let removePreviousHandler: (() => void) | void\n  return (callback: (handler: () => void) => void) => {\n    // Unsub the old handler\n    if (removePreviousHandler) {\n      removePreviousHandler()\n    }\n    // Sub the new handler\n    removePreviousHandler = callback(fn)\n  }\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n\ntype BatchUpdateFunction = (callback: () => void) => void\n\n// Default to a dummy \"batch\" implementation that just runs the callback\nlet batchedUpdates: BatchUpdateFunction = (callback: () => void) => {\n  callback()\n}\n\n// Allow injecting another batching function later\nexport function setBatchedUpdates(fn: BatchUpdateFunction) {\n  batchedUpdates = fn\n}\n\n// Supply a getter just to skip dealing with ESM bindings\nexport function getBatchedUpdates(): BatchUpdateFunction {\n  return batchedUpdates\n}\n","import { stableStringify } from './utils'\nimport type {\n  ArrayQueryKey,\n  MutationConfig,\n  QueryConfig,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n  ResolvedQueryConfig,\n} from './types'\nimport type { QueryCache } from './queryCache'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  queries: {\n    cacheTime: 5 * 60 * 1000,\n    enabled: true,\n    notifyOnStatusChange: true,\n    queryFn: () => Promise.reject(),\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    structuralSharing: true,\n  },\n}\n\nexport function getDefaultReactQueryConfig() {\n  return {\n    queries: { ...DEFAULT_CONFIG.queries },\n    mutations: { ...DEFAULT_CONFIG.mutations },\n  }\n}\n\nexport function mergeReactQueryConfigs(\n  a: ReactQueryConfig,\n  b: ReactQueryConfig\n): ReactQueryConfig {\n  return {\n    shared: {\n      ...a.shared,\n      ...b.shared,\n    },\n    queries: {\n      ...a.queries,\n      ...b.queries,\n    },\n    mutations: {\n      ...a.mutations,\n      ...b.mutations,\n    },\n  }\n}\n\nexport function getResolvedQueryConfig<TResult, TError>(\n  queryCache: QueryCache,\n  queryKey: QueryKey,\n  contextConfig?: ReactQueryConfig,\n  config?: QueryConfig<TResult, TError>\n): ResolvedQueryConfig<TResult, TError> {\n  const queryCacheConfig = queryCache.getDefaultConfig()\n\n  const resolvedConfig = {\n    ...DEFAULT_CONFIG.queries,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.queries,\n    ...contextConfig?.shared,\n    ...contextConfig?.queries,\n    ...config,\n  } as ResolvedQueryConfig<TResult, TError>\n\n  const result = resolvedConfig.queryKeySerializerFn(queryKey)\n\n  resolvedConfig.queryCache = queryCache\n  resolvedConfig.queryHash = result[0]\n  resolvedConfig.queryKey = result[1]\n\n  return resolvedConfig\n}\n\nexport function isResolvedQueryConfig<TResult, TError>(\n  config: any\n): config is ResolvedQueryConfig<TResult, TError> {\n  return Boolean(config.queryHash)\n}\n\nexport function getResolvedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  queryCache: QueryCache,\n  contextConfig?: ReactQueryConfig,\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return {\n    ...DEFAULT_CONFIG.mutations,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.mutations,\n    ...contextConfig?.shared,\n    ...contextConfig?.mutations,\n    ...config,\n  } as MutationConfig<TResult, TError, TVariables, TSnapshot>\n}\n","import { getBatchedUpdates, scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\n// CLASS\n\nexport class NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(notify: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(notify)\n    } else {\n      scheduleMicrotask(() => {\n        notify()\n      })\n    }\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        const batchedUpdates = getBatchedUpdates()\n        batchedUpdates(() => {\n          queue.forEach(notify => {\n            notify()\n          })\n        })\n      })\n    }\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import {\n  getStatusProps,\n  isDocumentVisible,\n  isServer,\n  isValidTimeout,\n  noop,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryConfig, QueryResult, ResolvedQueryConfig } from './types'\nimport type { Query, Action, FetchMoreOptions, RefetchOptions } from './query'\nimport { DEFAULT_CONFIG, isResolvedQueryConfig } from './config'\n\nexport type UpdateListener<TResult, TError> = (\n  result: QueryResult<TResult, TError>\n) => void\n\ninterface NotifyOptions {\n  globalListeners?: boolean\n  listener?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport class QueryObserver<TResult, TError> {\n  config: ResolvedQueryConfig<TResult, TError>\n\n  private currentQuery!: Query<TResult, TError>\n  private currentResult!: QueryResult<TResult, TError>\n  private previousQueryResult?: QueryResult<TResult, TError>\n  private listener?: UpdateListener<TResult, TError>\n  private isStale: boolean\n  private initialUpdateCount: number\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n\n  constructor(config: ResolvedQueryConfig<TResult, TError>) {\n    this.config = config\n    this.isStale = true\n    this.initialUpdateCount = 0\n\n    // Bind exposed methods\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n    this.unsubscribe = this.unsubscribe.bind(this)\n\n    // Subscribe to the query\n    this.updateQuery()\n  }\n\n  subscribe(listener?: UpdateListener<TResult, TError>): () => void {\n    this.listener = listener || noop\n    this.currentQuery.subscribeObserver(this)\n\n    if (\n      this.config.enabled &&\n      (this.config.forceFetchOnMount || this.config.refetchOnMount === 'always')\n    ) {\n      this.fetch()\n    } else {\n      this.optionalFetch()\n    }\n\n    this.updateTimers()\n\n    return this.unsubscribe\n  }\n\n  unsubscribe(): void {\n    this.listener = undefined\n    this.clearTimers()\n    this.currentQuery.unsubscribeObserver(this)\n  }\n\n  updateConfig(\n    config: QueryConfig<TResult, TError> | ResolvedQueryConfig<TResult, TError>\n  ): void {\n    const prevConfig = this.config\n    const prevQuery = this.currentQuery\n\n    this.config = isResolvedQueryConfig(config)\n      ? config\n      : this.config.queryCache.getResolvedQueryConfig(\n          this.config.queryKey,\n          config\n        )\n\n    this.updateQuery()\n\n    // Take no further actions if there is no subscriber\n    if (!this.listener) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (this.currentQuery !== prevQuery) {\n      this.optionalFetch()\n      this.updateTimers()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch()\n    }\n\n    // Update stale interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.staleTime !== prevConfig.staleTime\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.refetchInterval !== prevConfig.refetchInterval\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getCurrentQuery(): Query<TResult, TError> {\n    return this.currentQuery\n  }\n\n  getCurrentResult(): QueryResult<TResult, TError> {\n    return this.currentResult\n  }\n\n  /**\n   * @deprecated\n   */\n  clear(): void {\n    this.remove()\n  }\n\n  remove(): void {\n    this.currentQuery.remove()\n  }\n\n  refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    return this.currentQuery.refetch(options, this.config)\n  }\n\n  fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.currentQuery\n      .fetchMore(fetchMoreVariable, options, this.config)\n      .catch(noop)\n  }\n\n  fetch(): Promise<TResult | undefined> {\n    // Never try to fetch if no query function has been set\n    if (this.config.queryFn === DEFAULT_CONFIG.queries?.queryFn) {\n      return Promise.resolve(this.currentResult.data)\n    }\n\n    return this.currentQuery.fetch(undefined, this.config).catch(noop)\n  }\n\n  private optionalFetch(): void {\n    if (\n      this.config.enabled && // Only fetch if enabled\n      this.isStale && // Only fetch if stale\n      !(this.config.suspense && this.currentResult.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n      (this.config.refetchOnMount || this.currentQuery.observers.length === 1)\n    ) {\n      this.fetch()\n    }\n  }\n\n  private updateStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    if (this.isStale || !isValidTimeout(this.config.staleTime)) {\n      return\n    }\n\n    const timeElapsed = Date.now() - this.currentResult.updatedAt\n    const timeUntilStale = this.config.staleTime - timeElapsed + 1\n    const timeout = Math.max(timeUntilStale, 0)\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.isStale) {\n        this.isStale = true\n        this.updateResult()\n        this.notify({ listener: true, globalListeners: true })\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearRefetchInterval()\n\n    if (!this.config.enabled || !isValidTimeout(this.config.refetchInterval)) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.config.refetchIntervalInBackground || isDocumentVisible()) {\n        this.fetch()\n      }\n    }, this.config.refetchInterval)\n  }\n\n  updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearInterval(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  private updateResult(): void {\n    const { state } = this.currentQuery\n    let { data, status, updatedAt } = state\n    let isPreviousData = false\n\n    // Keep previous data if needed\n    if (\n      this.config.keepPreviousData &&\n      state.isInitialData &&\n      this.previousQueryResult?.isSuccess\n    ) {\n      data = this.previousQueryResult.data\n      updatedAt = this.previousQueryResult.updatedAt\n      status = this.previousQueryResult.status\n      isPreviousData = true\n    }\n\n    this.currentResult = {\n      ...getStatusProps(status),\n      canFetchMore: state.canFetchMore,\n      clear: this.remove,\n      data,\n      error: state.error,\n      failureCount: state.failureCount,\n      fetchMore: this.fetchMore,\n      isFetched: state.updateCount > 0,\n      isFetchedAfterMount: state.updateCount > this.initialUpdateCount,\n      isFetching: state.isFetching,\n      isFetchingMore: state.isFetchingMore,\n      isInitialData: state.isInitialData,\n      isPreviousData,\n      isStale: this.isStale,\n      refetch: this.refetch,\n      remove: this.remove,\n      updatedAt,\n    }\n  }\n\n  private updateQuery(): void {\n    const config = this.config\n    const prevQuery = this.currentQuery\n\n    let query = config.queryCache.getQueryByHash<TResult, TError>(\n      config.queryHash\n    )\n\n    if (!query) {\n      query = config.queryCache.createQuery(config)\n    }\n\n    if (query === prevQuery) {\n      return\n    }\n\n    this.previousQueryResult = this.currentResult\n    this.currentQuery = query\n    this.initialUpdateCount = query.state.updateCount\n\n    // Update stale state on query switch\n    if (query.state.isInitialData) {\n      if (config.keepPreviousData && prevQuery) {\n        this.isStale = true\n      } else if (typeof config.initialStale === 'function') {\n        this.isStale = config.initialStale()\n      } else if (typeof config.initialStale === 'boolean') {\n        this.isStale = config.initialStale\n      } else {\n        this.isStale = typeof query.state.data === 'undefined'\n      }\n    } else {\n      this.isStale = query.isStaleByTime(config.staleTime)\n    }\n\n    this.updateResult()\n\n    if (this.listener) {\n      prevQuery?.unsubscribeObserver(this)\n      this.currentQuery.subscribeObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TResult, TError>): void {\n    const { config } = this\n    const { type } = action\n\n    // Update stale state on success, error or invalidation\n    if (type === 2 || type === 3 || type === 4) {\n      this.isStale = this.currentQuery.isStaleByTime(config.staleTime)\n    }\n\n    // Store current result and get new result\n    const prevResult = this.currentResult\n    this.updateResult()\n    const currentResult = this.currentResult\n\n    // Update timers on success, error or invalidation\n    if (type === 2 || type === 3 || type === 4) {\n      this.updateTimers()\n    }\n\n    // Do not notify if the query was invalidated but the stale state did not changed\n    if (type === 4 && currentResult.isStale === prevResult.isStale) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {}\n\n    if (type === 2) {\n      notifyOptions.onSuccess = true\n    } else if (type === 3) {\n      notifyOptions.onError = true\n    }\n\n    if (\n      // Always notify if notifyOnStatusChange is set\n      config.notifyOnStatusChange ||\n      // Otherwise only notify on data or error change\n      currentResult.data !== prevResult.data ||\n      currentResult.error !== prevResult.error\n    ) {\n      notifyOptions.listener = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  private notify(options: NotifyOptions): void {\n    const { config, currentResult, currentQuery, listener } = this\n    const { onSuccess, onSettled, onError } = config\n\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (options.onSuccess) {\n        if (onSuccess) {\n          notifyManager.schedule(() => {\n            onSuccess(currentResult.data!)\n          })\n        }\n        if (onSettled) {\n          notifyManager.schedule(() => {\n            onSettled(currentResult.data!, null)\n          })\n        }\n      } else if (options.onError) {\n        if (onError) {\n          notifyManager.schedule(() => {\n            onError(currentResult.error!)\n          })\n        }\n        if (onSettled) {\n          notifyManager.schedule(() => {\n            onSettled(undefined, currentResult.error!)\n          })\n        }\n      }\n\n      // Then trigger the listener\n      if (options.listener && listener) {\n        notifyManager.schedule(() => {\n          listener(currentResult)\n        })\n      }\n\n      // Then the global listeners\n      if (options.globalListeners) {\n        config.queryCache.notifyGlobalListeners(currentQuery)\n      }\n    })\n  }\n}\n","import {\n  CancelledError,\n  Console,\n  Updater,\n  functionalUpdate,\n  isCancelable,\n  isCancelledError,\n  isDocumentVisible,\n  isOnline,\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  sleep,\n} from './utils'\nimport {\n  ArrayQueryKey,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryFunction,\n  QueryStatus,\n  ResolvedQueryConfig,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport { QueryObserver, UpdateListener } from './queryObserver'\nimport { notifyManager } from './notifyManager'\n\n// TYPES\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isFetching: boolean\n  isFetchingMore: IsFetchingMoreValue\n  isInitialData: boolean\n  isInvalidated: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updateCount: number\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport interface RefetchOptions {\n  throwOnError?: boolean\n}\n\nconst enum ActionType {\n  Failed,\n  Fetch,\n  Success,\n  Error,\n  Invalidate,\n}\n\ninterface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n  isFetchingMore?: IsFetchingMoreValue\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  data: TResult | undefined\n  canFetchMore?: boolean\n  updatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: ActionType.Invalidate\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: ResolvedQueryConfig<TResult, TError>\n  observers: QueryObserver<TResult, TError>[]\n  state: QueryState<TResult, TError>\n  cacheTime: number\n\n  private queryCache: QueryCache\n  private promise?: Promise<TResult>\n  private gcTimeout?: number\n  private cancelFetch?: (silent?: boolean) => void\n  private continueFetch?: () => void\n  private isTransportCancelable?: boolean\n\n  constructor(config: ResolvedQueryConfig<TResult, TError>) {\n    this.config = config\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.queryCache = config.queryCache\n    this.cacheTime = config.cacheTime\n    this.observers = []\n    this.state = getDefaultState(config)\n    this.scheduleGc()\n  }\n\n  private updateConfig(config: ResolvedQueryConfig<TResult, TError>): void {\n    this.config = config\n    this.cacheTime = Math.max(this.cacheTime, config.cacheTime)\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    this.state = queryReducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.queryCache.notifyGlobalListeners(this)\n    })\n  }\n\n  private scheduleGc(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearGcTimeout()\n\n    if (this.observers.length > 0 || !isValidTimeout(this.cacheTime)) {\n      return\n    }\n\n    this.gcTimeout = setTimeout(() => {\n      this.remove()\n    }, this.cacheTime)\n  }\n\n  cancel(silent?: boolean): Promise<undefined> {\n    const promise = this.promise\n\n    if (promise && this.cancelFetch) {\n      this.cancelFetch(silent)\n      return promise.then(noop).catch(noop)\n    }\n\n    return Promise.resolve(undefined)\n  }\n\n  private continue(): void {\n    this.continueFetch?.()\n  }\n\n  private clearTimersObservers(): void {\n    this.observers.forEach(observer => {\n      observer.clearTimers()\n    })\n  }\n\n  private clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  setData(\n    updater: Updater<TResult | undefined, TResult>,\n    options?: SetDataOptions\n  ): void {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data: TResult | undefined = functionalUpdate(updater, prevData)\n\n    // Structurally share data between prev and new data if needed\n    if (this.config.structuralSharing) {\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.config.isDataEqual?.(prevData, data)) {\n      data = prevData\n    }\n\n    // Try to determine if more data can be fetched\n    const canFetchMore = hasMorePages(this.config, data)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      data,\n      canFetchMore,\n      updatedAt: options?.updatedAt,\n    })\n  }\n\n  /**\n   * @deprecated\n   */\n  clear(): void {\n    Console.warn(\n      'react-query: clear() has been deprecated, please use remove() instead'\n    )\n    this.remove()\n  }\n\n  remove(): void {\n    this.queryCache.removeQuery(this)\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.clearTimersObservers()\n    this.cancel()\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.config.enabled)\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.status !== QueryStatus.Success ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.status !== QueryStatus.Success ||\n      this.state.updatedAt + staleTime <= Date.now()\n    )\n  }\n\n  onInteraction(type: 'focus' | 'online'): void {\n    // Execute the first observer which is enabled,\n    // stale and wants to refetch on this interaction.\n    const staleObserver = this.observers.find(observer => {\n      const { config } = observer\n      const { isStale } = observer.getCurrentResult()\n      return (\n        config.enabled &&\n        ((type === 'focus' &&\n          (config.refetchOnWindowFocus === 'always' ||\n            (config.refetchOnWindowFocus && isStale))) ||\n          (type === 'online' &&\n            (config.refetchOnReconnect === 'always' ||\n              (config.refetchOnReconnect && isStale))))\n      )\n    })\n\n    if (staleObserver) {\n      staleObserver.fetch()\n    }\n\n    // Continue any paused fetch\n    this.continue()\n  }\n\n  /**\n   * @deprectated\n   */\n  subscribe(\n    listener?: UpdateListener<TResult, TError>\n  ): QueryObserver<TResult, TError> {\n    const observer = new QueryObserver(this.config)\n    observer.subscribe(listener)\n    return observer\n  }\n\n  subscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers.push(observer)\n\n    // Stop the query from being garbage collected\n    this.clearGcTimeout()\n  }\n\n  unsubscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    if (!this.observers.length) {\n      // If the transport layer does not support cancellation\n      // we'll let the query continue so the result can be cached\n      if (this.isTransportCancelable) {\n        this.cancel()\n      }\n\n      this.scheduleGc()\n    }\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: ActionType.Invalidate })\n    }\n  }\n\n  /**\n   * @deprectated\n   */\n  refetch(\n    options?: RefetchOptions,\n    config?: ResolvedQueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    let promise: Promise<TResult | undefined> = this.fetch(undefined, config)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  /**\n   * @deprectated\n   */\n  fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions,\n    config?: ResolvedQueryConfig<TResult, TError>\n  ): Promise<TResult | undefined> {\n    return this.fetch(\n      {\n        fetchMore: {\n          fetchMoreVariable,\n          previous: options?.previous || false,\n        },\n      },\n      config\n    )\n  }\n\n  async fetch(\n    options?: FetchOptions,\n    config?: ResolvedQueryConfig<TResult, TError>\n  ): Promise<TResult> {\n    if (this.promise) {\n      if (options?.fetchMore && this.state.data) {\n        // Silently cancel current fetch if the user wants to fetch more\n        await this.cancel(true)\n      } else {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (config) {\n      this.updateConfig(config)\n    }\n\n    config = this.config\n\n    // Get the query function params\n    const filter = config.queryFnParamsFilter\n    const params = filter ? filter(this.queryKey) : this.queryKey\n\n    this.promise = (async () => {\n      try {\n        let data: any\n\n        if (config.infinite) {\n          data = await this.startInfiniteFetch(config, params, options)\n        } else {\n          data = await this.startFetch(config, params, options)\n        }\n\n        // Set success state\n        this.setData(data)\n\n        // Cleanup\n        delete this.promise\n\n        // Return data\n        return data\n      } catch (error) {\n        // Set error state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: ActionType.Error,\n            error,\n          })\n        }\n\n        // Log error\n        if (!isCancelledError(error)) {\n          Console.error(error)\n        }\n\n        // Cleanup\n        delete this.promise\n\n        // Propagate error\n        throw error\n      }\n    })()\n\n    return this.promise\n  }\n\n  private startFetch(\n    config: ResolvedQueryConfig<TResult, TError>,\n    params: unknown[],\n    _options?: FetchOptions\n  ): Promise<TResult> {\n    // Create function to fetch the data\n    const fetchData = () => config.queryFn(...params)\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch })\n    }\n\n    // Try to fetch the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private startInfiniteFetch(\n    config: ResolvedQueryConfig<TResult, TError>,\n    params: unknown[],\n    options?: FetchOptions\n  ): Promise<TResult[]> {\n    const fetchMore = options?.fetchMore\n    const { previous, fetchMoreVariable } = fetchMore || {}\n    const isFetchingMore = fetchMore ? (previous ? 'previous' : 'next') : false\n    const prevPages: TResult[] = (this.state.data as any) || []\n\n    // Create function to fetch a page\n    const fetchPage = async (\n      pages: TResult[],\n      prepend?: boolean,\n      cursor?: unknown\n    ) => {\n      const lastPage = getLastPage(pages, prepend)\n\n      if (\n        typeof cursor === 'undefined' &&\n        typeof lastPage !== 'undefined' &&\n        config.getFetchMore\n      ) {\n        cursor = config.getFetchMore(lastPage, pages)\n      }\n\n      if (!Boolean(cursor) && typeof lastPage !== 'undefined') {\n        return pages\n      }\n\n      const page = await config.queryFn(...params, cursor)\n\n      return prepend ? [page, ...pages] : [...pages, page]\n    }\n\n    // Create function to fetch the data\n    const fetchData = () => {\n      if (isFetchingMore) {\n        return fetchPage(prevPages, previous, fetchMoreVariable)\n      } else if (!prevPages.length) {\n        return fetchPage([])\n      } else {\n        let promise = fetchPage([])\n        for (let i = 1; i < prevPages.length; i++) {\n          promise = promise.then(fetchPage)\n        }\n        return promise\n      }\n    }\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.isFetchingMore !== isFetchingMore\n    ) {\n      this.dispatch({ type: ActionType.Fetch, isFetchingMore })\n    }\n\n    // Try to get the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private tryFetchData<T>(\n    config: ResolvedQueryConfig<TResult, TError>,\n    fn: QueryFunction<T>\n  ): Promise<T> {\n    return new Promise<T>((outerResolve, outerReject) => {\n      let resolved = false\n      let continueLoop: () => void\n      let cancelTransport: () => void\n\n      const done = () => {\n        resolved = true\n\n        delete this.cancelFetch\n        delete this.continueFetch\n        delete this.isTransportCancelable\n\n        // End loop if currently paused\n        continueLoop?.()\n      }\n\n      const resolve = (value: any) => {\n        done()\n        outerResolve(value)\n      }\n\n      const reject = (value: any) => {\n        done()\n        outerReject(value)\n      }\n\n      // Create callback to cancel this fetch\n      this.cancelFetch = silent => {\n        reject(new CancelledError(silent))\n        cancelTransport?.()\n      }\n\n      // Create callback to continue this fetch\n      this.continueFetch = () => {\n        continueLoop?.()\n      }\n\n      // Create loop function\n      const run = async () => {\n        try {\n          // Execute query\n          const promiseOrValue = fn()\n\n          // Check if the transport layer support cancellation\n          if (isCancelable(promiseOrValue)) {\n            cancelTransport = () => {\n              try {\n                promiseOrValue.cancel()\n              } catch {}\n            }\n            this.isTransportCancelable = true\n          }\n\n          // Await data\n          resolve(await promiseOrValue)\n        } catch (error) {\n          // Stop if the fetch is already resolved\n          if (resolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const { failureCount } = this.state\n          const { retry, retryDelay } = config\n\n          const shouldRetry =\n            retry === true ||\n            failureCount < retry! ||\n            (typeof retry === 'function' && retry(failureCount, error))\n\n          if (!shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          // Increase the failureCount\n          this.dispatch({ type: ActionType.Failed })\n\n          // Delay\n          await sleep(functionalUpdate(retryDelay, failureCount) || 0)\n\n          // Pause retry if the document is not visible or when the device is offline\n          if (!isDocumentVisible() || !isOnline()) {\n            await new Promise(continueResolve => {\n              continueLoop = continueResolve\n            })\n          }\n\n          // Try again if not resolved yet\n          if (!resolved) {\n            run()\n          }\n        }\n      }\n\n      // Start loop\n      run()\n    })\n  }\n}\n\nfunction getLastPage<TResult>(pages: TResult[], previous?: boolean): TResult {\n  return previous ? pages[0] : pages[pages.length - 1]\n}\n\nfunction hasMorePages<TResult, TError>(\n  config: ResolvedQueryConfig<TResult, TError>,\n  pages: unknown,\n  previous?: boolean\n): boolean | undefined {\n  if (config.infinite && config.getFetchMore && Array.isArray(pages)) {\n    return Boolean(config.getFetchMore(getLastPage(pages, previous), pages))\n  }\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: ResolvedQueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const data =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const status =\n    typeof data !== 'undefined'\n      ? QueryStatus.Success\n      : config.enabled\n      ? QueryStatus.Loading\n      : QueryStatus.Idle\n\n  return {\n    canFetchMore: hasMorePages(config, data),\n    data,\n    error: null,\n    failureCount: 0,\n    isFetching: status === QueryStatus.Loading,\n    isFetchingMore: false,\n    isInitialData: true,\n    isInvalidated: false,\n    status,\n    updateCount: 0,\n    updatedAt: Date.now(),\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.Fetch:\n      return {\n        ...state,\n        failureCount: 0,\n        isFetching: true,\n        isFetchingMore: action.isFetchingMore || false,\n        status:\n          typeof state.data !== 'undefined'\n            ? QueryStatus.Success\n            : QueryStatus.Loading,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        canFetchMore: action.canFetchMore,\n        data: action.data,\n        error: null,\n        failureCount: 0,\n        isFetching: false,\n        isFetchingMore: false,\n        isInitialData: false,\n        isInvalidated: false,\n        status: QueryStatus.Success,\n        updateCount: state.updateCount + 1,\n        updatedAt: action.updatedAt ?? Date.now(),\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isFetching: false,\n        isFetchingMore: false,\n        status: QueryStatus.Error,\n        throwInErrorBoundary: true,\n        updateCount: state.updateCount + 1,\n      }\n    case ActionType.Invalidate:\n      return {\n        ...state,\n        isInvalidated: true,\n      }\n    default:\n      return state\n  }\n}\n","import {\n  Updater,\n  deepIncludes,\n  getQueryArgs,\n  isDocumentVisible,\n  isOnline,\n  isPlainObject,\n  isServer,\n  noop,\n} from './utils'\nimport { getResolvedQueryConfig } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  ReactQueryConfig,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n  ResolvedQueryConfig,\n} from './types'\nimport { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface RefetchQueriesOptions extends QueryPredicateOptions {\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends RefetchQueriesOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n}\n\ninterface QueryPredicateOptions {\n  active?: boolean\n  exact?: boolean\n  stale?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface FetchQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n}\n\nexport interface PrefetchQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private globalListeners: QueryCacheListener[]\n  private queries: QueryHashMap\n  private queriesArray: Query<any, any>[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n    this.globalListeners = []\n    this.queries = {}\n    this.queriesArray = []\n    this.isFetching = 0\n  }\n\n  notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = this.getQueries().reduce(\n      (acc, q) => (q.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    notifyManager.batch(() => {\n      this.globalListeners.forEach(listener => {\n        notifyManager.schedule(() => {\n          listener(this, query)\n        })\n      })\n    })\n  }\n\n  getDefaultConfig() {\n    return this.config.defaultConfig\n  }\n\n  getResolvedQueryConfig<TResult, TError>(\n    queryKey: QueryKey,\n    config?: QueryConfig<TResult, TError>\n  ): ResolvedQueryConfig<TResult, TError> {\n    return getResolvedQueryConfig(this, queryKey, undefined, config)\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners = this.globalListeners.filter(x => x !== listener)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    this.removeQueries()\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    const anyKey = predicate === true || typeof predicate === 'undefined'\n\n    if (anyKey && !options) {\n      return this.queriesArray\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const { exact, active, stale } = options || {}\n      const resolvedConfig = this.getResolvedQueryConfig(predicate)\n\n      predicateFn = query => {\n        // Check query key if needed\n        if (!anyKey) {\n          if (exact) {\n            // Check if the query key matches exactly\n            if (query.queryHash !== resolvedConfig.queryHash) {\n              return false\n            }\n          } else {\n            // Check if the query key matches partially\n            if (!deepIncludes(query.queryKey, resolvedConfig.queryKey)) {\n              return false\n            }\n          }\n        }\n\n        // Check active state if needed\n        if (typeof active === 'boolean' && query.isActive() !== active) {\n          return false\n        }\n\n        // Check stale state if needed\n        if (typeof stale === 'boolean' && query.isStale() !== stale) {\n          return false\n        }\n\n        return true\n      }\n    }\n\n    return this.queriesArray.filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryByHash<TResult, TError = unknown>(\n    queryHash: string\n  ): Query<TResult, TError> | undefined {\n    return this.queries[queryHash]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQuery(query: Query<any, any>): void {\n    if (this.queries[query.queryHash]) {\n      query.destroy()\n      delete this.queries[query.queryHash]\n      this.queriesArray = this.queriesArray.filter(x => x !== query)\n      this.notifyGlobalListeners(query)\n    }\n  }\n\n  removeQueries(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => {\n      this.removeQuery(query)\n    })\n  }\n\n  cancelQueries(\n    predicate?: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => {\n      query.cancel()\n    })\n  }\n\n  /**\n   * @return Promise resolving to an array with the invalidated queries.\n   */\n  invalidateQueries(\n    predicate?: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<Query<unknown, unknown>[]> {\n    const queries = this.getQueries(predicate, options)\n\n    notifyManager.batch(() => {\n      queries.forEach(query => {\n        query.invalidate()\n      })\n    })\n\n    const { refetchActive = true, refetchInactive = false } = options || {}\n\n    if (!refetchInactive && !refetchActive) {\n      return Promise.resolve(queries)\n    }\n\n    const refetchOptions: RefetchQueriesOptions = { ...options }\n\n    if (refetchActive && !refetchInactive) {\n      refetchOptions.active = true\n    } else if (refetchInactive && !refetchActive) {\n      refetchOptions.active = false\n    }\n\n    let promise = this.refetchQueries(predicate, refetchOptions)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(() => queries)\n    }\n\n    return promise.then(() => queries)\n  }\n\n  /**\n   * @return Promise resolving to an array with the refetched queries.\n   */\n  refetchQueries(\n    predicate?: QueryPredicate,\n    options?: RefetchQueriesOptions\n  ): Promise<Query<unknown, unknown>[]> {\n    const promises: Promise<Query<unknown, unknown>>[] = []\n\n    notifyManager.batch(() => {\n      this.getQueries(predicate, options).forEach(query => {\n        let promise = query.fetch().then(() => query)\n\n        if (!options?.throwOnError) {\n          promise = promise.catch(() => query)\n        }\n\n        promises.push(promise)\n      })\n    })\n\n    return Promise.all(promises)\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries().forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    config?: QueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const resolvedConfig = this.getResolvedQueryConfig(queryKey, config)\n    let query = this.getQueryByHash<TResult, TError>(resolvedConfig.queryHash)\n\n    if (!query) {\n      query = this.createQuery(resolvedConfig)\n    }\n\n    return query\n  }\n\n  createQuery<TResult, TError = unknown>(\n    config: ResolvedQueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const query = new Query(config)\n\n    // A frozen cache does not add new queries to the cache\n    if (!this.config.frozen) {\n      this.queries[query.queryHash] = query\n      this.queriesArray.push(query)\n      this.notifyGlobalListeners(query)\n    }\n\n    return query\n  }\n\n  // Parameter syntax\n  fetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Promise<TResult>\n\n  // Parameter syntax with query function\n  fetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Promise<TResult>\n\n  fetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Promise<TResult>\n\n  // Object syntax\n  fetchQuery<TResult = unknown, TError = unknown>(\n    config: FetchQueryObjectConfig<TResult, TError>\n  ): Promise<TResult>\n\n  // Implementation\n  fetchQuery<TResult, TError>(\n    arg1: any,\n    arg2?: any,\n    arg3?: any\n  ): Promise<TResult> {\n    const [queryKey, config] = getQueryArgs<TResult, TError>(arg1, arg2, arg3)\n\n    const resolvedConfig = this.getResolvedQueryConfig(queryKey, {\n      // https://github.com/tannerlinsley/react-query/issues/652\n      retry: false,\n      ...config,\n    })\n\n    let query = this.getQueryByHash<TResult, TError>(resolvedConfig.queryHash)\n\n    if (!query) {\n      query = this.createQuery(resolvedConfig)\n    }\n\n    if (!query.isStaleByTime(config.staleTime)) {\n      return Promise.resolve(query.state.data as TResult)\n    }\n\n    return query.fetch(undefined, resolvedConfig)\n  }\n\n  // Parameter syntax with optional prefetch options\n  prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  prefetchQuery<TResult = unknown, TError = unknown>(\n    config: PrefetchQueryObjectConfig<TResult, TError>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  prefetchQuery<TResult, TError>(\n    arg1: any,\n    arg2?: any,\n    arg3?: any,\n    arg4?: any\n  ): Promise<TResult | undefined> {\n    if (\n      isPlainObject(arg2) &&\n      (arg2.hasOwnProperty('throwOnError') || arg2.hasOwnProperty('force'))\n    ) {\n      arg4 = arg2\n      arg2 = undefined\n      arg3 = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(arg1, arg2, arg3, arg4)\n\n    if (options?.force) {\n      config.staleTime = 0\n    }\n\n    let promise: Promise<TResult | undefined> = this.fetchQuery(\n      queryKey,\n      config\n    )\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  // Parameter syntax\n  watchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): QueryObserver<TResult, TError>\n\n  // Parameter syntax with query function\n  watchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): QueryObserver<TResult, TError>\n\n  watchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): QueryObserver<TResult, TError>\n\n  // Implementation\n  watchQuery<TResult, TError>(\n    arg1: any,\n    arg2?: any,\n    arg3?: any\n  ): QueryObserver<TResult, TError> {\n    const [queryKey, config] = getQueryArgs<TResult, TError>(arg1, arg2, arg3)\n    const resolvedConfig = this.getResolvedQueryConfig(queryKey, config)\n    return new QueryObserver(resolvedConfig)\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config?: QueryConfig<TResult, TError>\n  ) {\n    this.buildQuery(queryKey, config).setData(updater)\n  }\n}\n\nconst defaultQueryCache = new QueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\n/**\n * @deprecated\n */\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n\nexport function onVisibilityOrOnlineChange(type: 'focus' | 'online') {\n  if (isDocumentVisible() && isOnline()) {\n    notifyManager.batch(() => {\n      queryCaches.forEach(queryCache => {\n        queryCache.getQueries().forEach(query => {\n          query.onInteraction(type)\n        })\n      })\n    })\n  }\n}\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setFocusHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange('focus')\n)\n\nsetFocusHandler(handleFocus => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to visibillitychange and focus\n  window.addEventListener('visibilitychange', handleFocus, false)\n  window.addEventListener('focus', handleFocus, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('visibilitychange', handleFocus)\n    window.removeEventListener('focus', handleFocus)\n  }\n})\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setOnlineHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange('online')\n)\n\nsetOnlineHandler(handleOnline => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to online\n  window.addEventListener('online', handleOnline, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('online', handleOnline)\n  }\n})\n","import ReactDOM from 'react-dom'\nexport const unstable_batchedUpdates = ReactDOM.unstable_batchedUpdates\n","import React from 'react'\n\nimport {\n  QueryCache,\n  queryCache as defaultQueryCache,\n  queryCaches,\n} from '../core'\n\nconst queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || new QueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { mergeReactQueryConfigs } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useContextConfig() {\n  return React.useContext(configContext)\n}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const parentConfig = useContextConfig()\n\n  const mergedConfig = React.useMemo(\n    () =>\n      parentConfig ? mergeReactQueryConfigs(parentConfig, config) : config,\n    [config, parentConfig]\n  )\n\n  return (\n    <configContext.Provider value={mergedConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface ReactQueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): ReactQueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst context = React.createContext(createValue())\n\n// HOOK\n\nexport const useErrorResetBoundary = () => React.useContext(context)\n\n// COMPONENT\n\nexport interface ReactQueryErrorResetBoundaryProps {\n  children:\n    | ((value: ReactQueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const ReactQueryErrorResetBoundary: React.FC<ReactQueryErrorResetBoundaryProps> = ({\n  children,\n}) => {\n  const value = React.useMemo(() => createValue(), [])\n  return (\n    <context.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </context.Provider>\n  )\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useIsMounted(): () => boolean {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const isMounted = useIsMounted()\n  return (React.useCallback(\n    (...args: any[]) => {\n      if (isMounted()) {\n        return callback(...args)\n      }\n    },\n    [callback, isMounted]\n  ) as any) as T\n}\n","import React from 'react'\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useIsMounted } from './utils'\n\nexport function useIsFetching(): number {\n  const isMounted = useIsMounted()\n  const queryCache = useQueryCache()\n  const [isFetching, setIsFetching] = React.useState(queryCache.isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(() => {\n        if (isMounted()) {\n          setIsFetching(queryCache.isFetching)\n        }\n      }),\n    [queryCache, setIsFetching, isMounted]\n  )\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { useMountedCallback } from './utils'\nimport { getResolvedMutationConfig } from '../core/config'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n  MutationResult,\n} from '../core/types'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nconst enum ActionType {\n  Reset,\n  Loading,\n  Resolve,\n  Reject,\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nfunction getDefaultState<TResult, TError>(): State<TResult, TError> {\n  return {\n    ...getStatusProps(QueryStatus.Idle),\n    data: undefined,\n    error: null,\n  }\n}\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  const cache = useQueryCache()\n  const contextConfig = useContextConfig()\n\n  // Get resolved config\n  const resolvedConfig = getResolvedMutationConfig(cache, contextConfig, config)\n\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const latestMutationRef = React.useRef<number>()\n  const latestMutationFnRef = React.useRef(mutationFn)\n  latestMutationFnRef.current = mutationFn\n  const latestConfigRef = React.useRef(resolvedConfig)\n  latestConfigRef.current = resolvedConfig\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const latestConfig = latestConfigRef.current\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await latestConfig.onMutate?.(variables!)) as TSnapshot\n\n        const latestMutationFn = latestMutationFnRef.current\n        const data = await latestMutationFn(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await latestConfig.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await latestConfig.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await latestConfig.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await latestConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError || latestConfig.throwOnError) {\n          throw error\n        }\n      }\n    },\n    [dispatch]\n  )\n\n  React.useEffect(() => {\n    const latestConfig = latestConfigRef.current\n    const { suspense, useErrorBoundary } = latestConfig\n    if ((useErrorBoundary || suspense) && state.error) {\n      throw state.error\n    }\n  }, [state.error])\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  const result: MutationResult<TResult, TError> = {\n    ...state,\n    reset,\n  }\n\n  return [mutate, result]\n}\n","import React from 'react'\n\nimport { useIsMounted } from './utils'\nimport { getResolvedQueryConfig } from '../core/config'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryResultBase, QueryKey, QueryConfig } from '../core/types'\nimport { useErrorResetBoundary } from './ReactQueryErrorResetBoundary'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useBaseQuery<TResult, TError>(\n  queryKey: QueryKey,\n  config?: QueryConfig<TResult, TError>\n): QueryResultBase<TResult, TError> {\n  const [, rerender] = React.useReducer(c => c + 1, 0)\n  const isMounted = useIsMounted()\n  const cache = useQueryCache()\n  const contextConfig = useContextConfig()\n  const errorResetBoundary = useErrorResetBoundary()\n\n  // Get resolved config\n  const resolvedConfig = getResolvedQueryConfig(\n    cache,\n    queryKey,\n    contextConfig,\n    config\n  )\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<TResult, TError>>()\n  const firstRender = !observerRef.current\n  const observer = observerRef.current || new QueryObserver(resolvedConfig)\n  observerRef.current = observer\n\n  // Subscribe to the observer\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n    return observer.subscribe(() => {\n      if (isMounted()) {\n        rerender()\n      }\n    })\n  }, [isMounted, observer, rerender, errorResetBoundary])\n\n  // Update config\n  if (!firstRender) {\n    observer.updateConfig(resolvedConfig)\n  }\n\n  const result = observer.getCurrentResult()\n\n  // Handle suspense\n  if (resolvedConfig.suspense || resolvedConfig.useErrorBoundary) {\n    const query = observer.getCurrentQuery()\n\n    if (\n      result.isError &&\n      !errorResetBoundary.isReset() &&\n      query.state.throwInErrorBoundary\n    ) {\n      throw result.error\n    }\n\n    if (\n      resolvedConfig.enabled &&\n      resolvedConfig.suspense &&\n      !result.isSuccess\n    ) {\n      errorResetBoundary.clearReset()\n      const unsubscribe = observer.subscribe()\n      throw observer.fetch().finally(unsubscribe)\n    }\n  }\n\n  return result\n}\n","import {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  QueryResult,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult = unknown, TError = unknown>(\n  config: UseQueryObjectConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  arg1: any,\n  arg2?: any,\n  arg3?: any\n): QueryResult<TResult, TError> {\n  const [queryKey, config] = getQueryArgs<TResult, TError>(arg1, arg2, arg3)\n  return useBaseQuery(queryKey, config)\n}\n","import {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  arg1: any,\n  arg2?: any,\n  arg3?: any\n): PaginatedQueryResult<TResult, TError> {\n  const [queryKey, config] = getQueryArgs<TResult, TError>(arg1, arg2, arg3)\n  const result = useBaseQuery(queryKey, {\n    keepPreviousData: true,\n    ...config,\n  })\n  return {\n    ...result,\n    resolvedData: result.data,\n    latestData: result.isPreviousData ? undefined : result.data,\n  }\n}\n","import {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  arg1: any,\n  arg2?: any,\n  arg3?: any\n): InfiniteQueryResult<TResult, TError> {\n  const [queryKey, config] = getQueryArgs<TResult[], TError>(arg1, arg2, arg3)\n  return useBaseQuery(queryKey, { ...config, infinite: true })\n}\n","import { setBatchedUpdates } from './core/index'\nimport { unstable_batchedUpdates } from './react/reactBatchedUpdates'\nsetBatchedUpdates(unstable_batchedUpdates)\n\nexport * from './core/index'\nexport * from './react/index'\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","QueryStatus","CancelledError","silent","_uid","uid","isServer","window","noop","undefined","Console","console","error","warn","log","setConsole","c","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isPlainObject","keys","sort","reduce","result","stableStringify","JSON","stringify","deepIncludes","a","b","some","isValidTimeout","Infinity","isDocumentVisible","document","includes","visibilityState","isOnline","navigator","onLine","getQueryArgs","arg1","arg2","arg3","arg4","queryKey","queryFn","config","options","replaceEqualDeep","array","Array","isArray","aSize","bItems","bSize","copy","equalItems","o","hasObjectPrototype","ctor","constructor","prot","toString","isCancelable","cancel","isError","isCancelledError","sleep","timeout","Promise","resolve","setTimeout","getStatusProps","status","isLoading","Loading","isSuccess","Success","isIdle","Idle","createSetHandler","fn","removePreviousHandler","callback","scheduleMicrotask","then","catch","batchedUpdates","setBatchedUpdates","getBatchedUpdates","defaultQueryKeySerializerFn","arrayQueryKey","queryHash","parse","DEFAULT_CONFIG","queries","cacheTime","enabled","notifyOnStatusChange","reject","queryKeySerializerFn","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","retry","retryDelay","attemptIndex","Math","min","staleTime","structuralSharing","getDefaultReactQueryConfig","mutations","mergeReactQueryConfigs","shared","getResolvedQueryConfig","queryCache","contextConfig","queryCacheConfig","getDefaultConfig","resolvedConfig","isResolvedQueryConfig","Boolean","getResolvedMutationConfig","NotifyManager","queue","transactions","batch","flush","schedule","notify","push","forEach","notifyManager","QueryObserver","isStale","initialUpdateCount","remove","bind","refetch","fetchMore","unsubscribe","updateQuery","subscribe","listener","currentQuery","subscribeObserver","forceFetchOnMount","fetch","optionalFetch","updateTimers","clearTimers","unsubscribeObserver","updateConfig","prevConfig","prevQuery","updateStaleTimeout","refetchInterval","updateRefetchInterval","getCurrentQuery","getCurrentResult","currentResult","clear","fetchMoreVariable","data","suspense","isFetched","observers","clearStaleTimeout","timeElapsed","Date","now","updatedAt","timeUntilStale","max","staleTimeoutId","updateResult","globalListeners","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","state","isPreviousData","keepPreviousData","isInitialData","previousQueryResult","canFetchMore","failureCount","updateCount","isFetchedAfterMount","isFetching","isFetchingMore","query","getQueryByHash","createQuery","initialStale","isStaleByTime","onQueryUpdate","action","type","prevResult","notifyOptions","onSuccess","onError","onSettled","notifyGlobalListeners","_empty","direct","body","recover","e","f","args","Query","getDefaultState","scheduleGc","dispatch","queryReducer","observer","clearGcTimeout","gcTimeout","promise","cancelFetch","continue","continueFetch","clearTimersObservers","clearTimeout","setData","prevData","isDataEqual","hasMorePages","ActionType","removeQuery","destroy","isActive","isInvalidated","onInteraction","staleObserver","find","filter","x","isTransportCancelable","invalidate","Invalidate","throwOnError","previous","queryFnParamsFilter","params","infinite","startInfiniteFetch","startFetch","_options","fetchData","Fetch","tryFetchData","prevPages","fetchPage","pages","prepend","cursor","lastPage","getLastPage","getFetchMore","page","outerResolve","outerReject","resolved","continueLoop","cancelTransport","done","run","promiseOrValue","shouldRetry","Failed","continueResolve","initialData","throwInErrorBoundary","QueryCache","queriesArray","getQueries","acc","q","defaultConfig","removeQueries","predicate","anyKey","predicateFn","exact","active","stale","getQuery","getQueryData","cancelQueries","invalidateQueries","refetchActive","refetchInactive","refetchOptions","refetchQueries","promises","all","resetErrorBoundaries","buildQuery","frozen","fetchQuery","prefetchQuery","force","watchQuery","setQueryData","defaultQueryCache","queryCaches","makeQueryCache","onVisibilityOrOnlineChange","setFocusHandler","handleFocus","addEventListener","removeEventListener","setOnlineHandler","handleOnline","unstable_batchedUpdates","ReactDOM","queryCacheContext","React","createContext","useQueryCache","useContext","ReactQueryCacheProvider","children","resolvedQueryCache","useMemo","useEffect","indexOf","splice","configContext","useContextConfig","ReactQueryConfigProvider","parentConfig","mergedConfig","createValue","isReset","clearReset","reset","context","useErrorResetBoundary","ReactQueryErrorResetBoundary","useIsMounted","mountedRef","useRef","isMounted","useCallback","current","useMountedCallback","useIsFetching","useState","setIsFetching","_await","mutationReducer","Reset","Resolve","Reject","useMutation","mutationFn","cache","useReducer","unsafeDispatch","latestMutationRef","latestMutationFnRef","latestConfigRef","mutate","variables","mutateConfig","latestConfig","mutationId","isLatest","snapshotValue","onMutate","latestMutationFn","useErrorBoundary","useBaseQuery","rerender","errorResetBoundary","observerRef","firstRender","finally","useQuery","usePaginatedQuery","resolvedData","latestData","useInfiniteQuery"],"mappings":"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"}